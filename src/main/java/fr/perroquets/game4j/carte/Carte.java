package fr.perroquets.game4j.carte;import fr.perroquets.game4j.*;import javax.imageio.ImageIO;import javax.swing.*;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.List;import java.util.Random;public class Carte {    private Dimensions dimensions;    private List<Case> cases = new ArrayList<>();    private int[][] matrix_distance;    private int[][] matrix_energy;    private int[][] matrix_maxEnergy;    private List<Integer> bestPathInEnergy = new ArrayList<>();    private List<Integer> bestPathInDistance = new ArrayList<>();    private List<Integer> bestPathToMaxEnergy = new ArrayList<>();    public Carte(Dimensions dimensions) {        this.dimensions = dimensions;    }    public Carte(Dimensions dimensions, List<Case> cases, int[][] matrix_distance, int[][] matrix_energy) {        this.dimensions = dimensions;        this.cases = cases;        this.matrix_distance = matrix_distance;        this.matrix_energy = matrix_energy;    }    public Dimensions getDimensions() {        return dimensions;    }    /**     * Genere une map pour la partie {@param game}     * @param game     */    public void generateCarte(Game game) {        int id = 0;        for (int i = 0; i < this.getDimensions().getSize(); i++) {            for (int j = 0; j < this.getDimensions().getSize(); j++) {                final Random random = new Random();                final double maxIndexBonus = game.getTauxBonus() * 100;                final double maxIndexObstacle = maxIndexBonus + (game.getTauxObstacle() * 100);                final int randomNumber = random.nextInt(100 - 1) + 1;                if(i == j && j == 0) { // CASE DE DEPART                    this.addCase(new Case(j, i, id, -1, CaseType.BLANK, true));                    if(Game4J.getInstance().isDebug()) System.out.println(id + " -> BLANK");                } else if(i == j && j == this.getDimensions().getSize() - 1) {                    this.addCase(new Case(j, i, id, -1, CaseType.WIN, true));                    if(Game4J.getInstance().isDebug()) System.out.println(id + " -> WIN");                } else if(randomNumber <= maxIndexBonus) {                    this.addCase(new Case(j, i, id, 9, CaseType.BONUS, true));                    if(Game4J.getInstance().isDebug()) System.out.println(id + " -> BONUS");                } else if(randomNumber <= maxIndexObstacle) {                    this.addCase(new Case(j, i, id, -11, CaseType.OBSTACLE, true));                    if(Game4J.getInstance().isDebug()) System.out.println(id + " -> OBSTACLE");                } else {                    this.addCase(new Case(j, i, id, -1, CaseType.BLANK, true));                    if(Game4J.getInstance().isDebug()) System.out.println(id + " -> BLANK");                }                id++;            }        }        Game4J.getInstance().getLoadingFrame().setProgress(50);        try {            this.generate_matrix_distance();            this.generate_matrix_energy();            this.generate_matrix_energyBestPath();            final Dijkstra dijkstra = new Dijkstra();            this.bestPathInDistance = dijkstra.getPath(game.getCarte().getMatrix_distance(), 0, game.getCarte().getDimensions().getArea() - 1);            if(Game4J.getInstance().isDebug()) System.out.println("Best path in distance");            for (Integer i: this.bestPathInDistance) {                if(Game4J.getInstance().isDebug()) System.out.println(i);            }            int distance = 0;            for (int i = 0; i < this.bestPathInDistance.size() - 1; i++) {                if(Game4J.getInstance().isDebug()) System.out.println("Mvt " + this.bestPathInDistance.get(i) + " -> " + this.bestPathInDistance.get(i+1) + " : " + this.matrix_distance[this.bestPathInDistance.get(i)][this.bestPathInDistance.get(i+1)] + " m.");                distance += this.matrix_distance[this.bestPathInDistance.get(i)][this.bestPathInDistance.get(i+1)];            }            if(distance == 0) generateCarte(game);            System.out.println("Distance total minimum: " + distance);            this.bestPathInEnergy = dijkstra.getPath(game.getCarte().getMatrix_energy(), 0, game.getCarte().getDimensions().getArea() - 1);            if(Game4J.getInstance().isDebug()) {                System.out.println("Best path in energy");                for (Integer i: this.bestPathInEnergy) {                    System.out.println(i);                }            }            int costEnergy = 0;            for (int i = 0; i < this.bestPathInEnergy.size() - 1; i++) {                if(Game4J.getInstance().isDebug()) System.out.println("Mvt " + this.bestPathInEnergy.get(i) + " -> " + this.bestPathInEnergy.get(i+1) + " : " + this.getCases().get(this.bestPathInEnergy.get(i+1)).getEnergy() + " ue.");                costEnergy += this.getCases().get(this.bestPathInEnergy.get(i+1)).getEnergy();            }            System.out.println("Energie totale minimum: " + costEnergy +" ue.");            if(costEnergy > game.getPersonnage().getInitialEnergy()) {                if(Game4J.getInstance().isDebug()) System.out.println("Not enough energy, needed: " + costEnergy + " had: " + game.getPersonnage().getInitialEnergy());                this.generateCarte(game);            }            this.bestPathToMaxEnergy = dijkstra.getPath(game.getCarte().getMatrix_maxEnergy(), 0, game.getCarte().getDimensions().getArea() - 1);            if(Game4J.getInstance().isDebug()) {                System.out.println("Best path to max energy");                for (Integer i: this.bestPathToMaxEnergy) {                    System.out.println(i);                }            }            int maxEnergy = 0;            for (int i = 0; i < this.bestPathToMaxEnergy.size() - 1; i++) {                if(Game4J.getInstance().isDebug()) System.out.println("Mvt " + this.bestPathToMaxEnergy.get(i) + " -> " + this.bestPathToMaxEnergy.get(i+1) + " : " + this.getCases().get(this.bestPathToMaxEnergy.get(i+1)).getEnergy() + " ue.");                maxEnergy += this.getCases().get(this.bestPathToMaxEnergy.get(i+1)).getEnergy();            }            System.out.println("Energie totale maximum: " + maxEnergy +" ue.");            Game4J.getInstance().getLoadingFrame().setProgress(70);        } catch (ArrayIndexOutOfBoundsException | StackOverflowError e) {            if(Game4J.getInstance().isDebug()) {                System.out.println("No path founded !");                this.generateCarte(game);            }        }    }    public int[][] getMatrix_maxEnergy() {        return matrix_maxEnergy;    }    public List<Integer> getBestPathInDistance() {        return bestPathInDistance;    }    public List<Integer> getBestPathInEnergy() {        return bestPathInEnergy;    }    public List<Integer> getBestPathToMaxEnergy() {        return bestPathToMaxEnergy;    }    public List<Case> getCases() {        return cases;    }    /**     * Permet de mettre Ã  jour l'affichage sur l'interface graphique     */    public void afficherCarte() {        final StringBuilder stringBuilder = new StringBuilder();        for (int i = 0; i < this.getDimensions().getSize(); i++) {            for (int j = 0; j < this.getDimensions().getSize(); j++) {                int indexI = i;                int indexJ = j;                final Case cases = this.getCases().stream().filter(c -> c.getPosition()[0] == indexJ && c.getPosition()[1] == indexI).findFirst().orElse(null);                String toPrint = "";                if(cases.getId() == Game4J.getInstance().getCurrentGame().getPersonnage().getPosition().getId()) {                    try {                        final int ind = cases.getId()+1;                        Method method = Game4J.getInstance().getGameFrame().getClass().getDeclaredMethod("getCase" + ind);                        final BufferedImage image = ImageIO.read(new File("casejoueur.jpg"));                        final ImageIcon ico = new ImageIcon(image);                        ((JLabel) method.invoke(Game4J.getInstance().getGameFrame())).setIcon(ico);                    } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | IOException e) {                        e.printStackTrace();                    }                } else {                    if(cases.isHidden() && cases.getCaseType() != CaseType.WIN) {                        try {                            final int ind = cases.getId()+1;                            Method method = Game4J.getInstance().getGameFrame().getClass().getDeclaredMethod("getCase" + ind);                            final BufferedImage image = ImageIO.read(new File("carre.jpg"));                            final ImageIcon ico = new ImageIcon(image);                            ((JLabel) method.invoke(Game4J.getInstance().getGameFrame())).setIcon(ico);                        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | IOException e) {                            e.printStackTrace();                        }                    } else {                        if(cases.getCaseType() == CaseType.WIN) {                            try {                                final int ind = cases.getId()+1;                                Method method = Game4J.getInstance().getGameFrame().getClass().getDeclaredMethod("getCase" + ind);                                final BufferedImage image = ImageIO.read(new File("casemaison.jpg"));                                final ImageIcon ico = new ImageIcon(image);                                ((JLabel) method.invoke(Game4J.getInstance().getGameFrame())).setIcon(ico);                            } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | IOException e) {                                e.printStackTrace();                            }                        } else if(cases.getCaseType() == CaseType.OBSTACLE && !cases.isHidden()) {                            try {                                final int ind = cases.getId()+1;                                Method method = Game4J.getInstance().getGameFrame().getClass().getDeclaredMethod("getCase" + ind);                                final BufferedImage image = ImageIO.read(new File("caserocher.jpg"));                                final ImageIcon ico = new ImageIcon(image);                                ((JLabel) method.invoke(Game4J.getInstance().getGameFrame())).setIcon(ico);                            } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | IOException e) {                                e.printStackTrace();                            }                        } else {                            try {                                final int ind = cases.getId()+1;                                Method method = Game4J.getInstance().getGameFrame().getClass().getDeclaredMethod("getCase" + ind);                                final BufferedImage image = ImageIO.read(new File("carrevert.jpg"));                                final ImageIcon ico = new ImageIcon(image);                                ((JLabel) method.invoke(Game4J.getInstance().getGameFrame())).setIcon(ico);                            } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException | IOException e) {                                e.printStackTrace();                            }                        }                        toPrint = cases.getCaseType().getToPrint();                    }                }                stringBuilder.append(toPrint).append(" ");            }            stringBuilder.append("\n");        }    }    public void addCase(Case caseToAdd) {        this.cases.add(caseToAdd);    }    public void removeCase(Case caseToRemove) {        this.cases.remove(caseToRemove);    }    /**     * Permet de gÃ©nÃ©rer la matrice des distances     */    public void generate_matrix_distance() {        final Graph g = new Graph(this.getDimensions().getArea());                int a = 0;        for (int i = 0; i < this.getDimensions().getArea(); i++) {            int index = i;            if(a < this.getDimensions().getMax_loop() && this.getCases().stream().filter(c -> c.getId() == (index+1)).findFirst().orElse(null).getCaseType() != CaseType.OBSTACLE && this.getCases().stream().filter(c -> c.getId() == (index)).findFirst().orElse(null).getCaseType() != CaseType.OBSTACLE ) {                g.addEdge(i, i + 1);                if(Game4J.getInstance().isDebug()) System.out.println("addEdge(" + i + "," + (i+1) + ")");                a++;            } else if(a < this.getDimensions().getMax_loop()){                g.addEdge(i, i + 1, 0);                if(Game4J.getInstance().isDebug()) System.out.println("addEdgeObstacle(" + i + "," + (i+1) + ")");                a++;            } else {                a = 0;            }        }        for (int i = 0; i <= Math.ceil(this.getDimensions().getArea()/2)+this.getDimensions().getMax_loop(); i++) {            int index = i;            if(this.getCases().stream().filter(c -> c.getId() == (index)).findFirst().orElse(null).getCaseType() != CaseType.OBSTACLE &&                    this.getCases().stream().filter(c -> c.getId() != (int) (index+ Math.sqrt(this.getDimensions().getArea()))).findFirst().orElse(null).getCaseType() != CaseType.OBSTACLE) {                g.addEdge(i, (int) (i+ Math.sqrt(this.getDimensions().getArea())));                if(Game4J.getInstance().isDebug()) System.out.println("addEdge(" + i + "," + (int) (i+ Math.sqrt(this.getDimensions().getArea())) + ")");            } else {                g.addEdge(i, (int) (i+ Math.sqrt(this.getDimensions().getArea())), 0);                if(Game4J.getInstance().isDebug()) System.out.println("addEdgeObstacle(" + i + "," + (int) (i+ Math.sqrt(this.getDimensions().getArea())) + ")");            }        }        this.matrix_distance = g.getAdjMatrix();        for (int i = 0; i < this.matrix_distance.length; i++) {            for (int j = 0; j < this.matrix_distance[0].length; j++) {                if(this.matrix_distance[i][j] == 0 && i != j) {                    this.matrix_distance[i][j] = -1;                }            }        }        if(Game4J.getInstance().isDebug()) System.out.println("distance matrix");        if(Game4J.getInstance().isDebug()) System.out.println(g);    }    /**     * Permet de gÃ©nÃ©rer la matrice des Ã©nergies     */    public void generate_matrix_energy() {        final Graph g = new Graph(this.getDimensions().getArea());        int a = 0;        for (int i = 0; i < this.getDimensions().getArea(); i++) {            if(a < this.getDimensions().getMax_loop()) {                final int finalI = i;                final Case casez = this.getCases().stream().filter(c -> c.getId() == finalI).findFirst().orElse(null);                if(casez == null) {                    if(Game4J.getInstance().isDebug()) System.out.println("Il y a un problÃ¨me ");                    return;                }                g.addEdge(i, i + 1, casez.getEnergy());                if(Game4J.getInstance().isDebug()) System.out.println("addEdge(" + i + "," + (i+1) + ")");                a++;            } else {                a = 0;            }        }        for (int i = 0; i <= Math.ceil(this.getDimensions().getArea()/2)+this.getDimensions().getMax_loop(); i++) {            final int finalI = i;            final Case casez = this.getCases().stream().filter(c -> c.getId() == finalI).findFirst().orElse(null);            if(casez == null) {                if(Game4J.getInstance().isDebug()) System.out.println("Il y a un problÃ¨me");                return;            }            g.addEdge(i, (int) (i+ Math.sqrt(this.getDimensions().getArea())), casez.getEnergy());            if(Game4J.getInstance().isDebug()) System.out.println("addEdge(" + i + "," + (int) (i+ Math.sqrt(this.getDimensions().getArea())) + ")");        }        this.matrix_energy = g.getAdjMatrix();        for (int i = 0; i < this.matrix_energy.length; i++) {            for (int j = 0; j < this.matrix_energy[0].length; j++) {                int indexI = i;                int indexJ = j;                if(this.matrix_energy[i][j] == -1) {                    this.matrix_energy[i][j] = 20;                }                if(this.matrix_energy[i][j] == 9) {                    this.matrix_energy[i][j] =  35;                }                if(this.matrix_energy[i][j] == -11) {                    this.matrix_energy[i][j] = 50;                }                if(this.matrix_energy[i][j] == 0 && i != j) {                    this.matrix_energy[i][j] = -1;                }                if(Game4J.getInstance().getCurrentGame().getCarte().getCases().stream().filter(c -> c.getId() == indexI || c.getId() == indexJ).findFirst().orElse(null).getCaseType() == CaseType.OBSTACLE) {                    this.matrix_energy[i][j] = -1;                }            }        }        if(Game4J.getInstance().isDebug()) System.out.println("energy matrix");        if(Game4J.getInstance().isDebug()) System.out.println(g);    }    /**     * Permet de gÃ©nÃ©rer la deuxiÃ¨me matrice des Ã©nergies     */    public void generate_matrix_energyBestPath() {        final Graph g = new Graph(this.getDimensions().getArea());        int a = 0;        for (int i = 0; i < this.getDimensions().getArea(); i++) {            if(a < this.getDimensions().getMax_loop()) {                final int finalI = i;                final Case casez = this.getCases().stream().filter(c -> c.getId() == finalI).findFirst().orElse(null);                if(casez == null) {                    if(Game4J.getInstance().isDebug()) System.out.println("Il y a un problÃ¨me ");                    return;                }                g.addEdge(i, i + 1, casez.getEnergy());                if(Game4J.getInstance().isDebug()) System.out.println("addEdge(" + i + "," + (i+1) + ")");                a++;            } else {                a = 0;            }        }        for (int i = 0; i <= Math.ceil(this.getDimensions().getArea()/2)+this.getDimensions().getMax_loop(); i++) {            final int finalI = i;            final Case casez = this.getCases().stream().filter(c -> c.getId() == finalI).findFirst().orElse(null);            if(casez == null) {                if(Game4J.getInstance().isDebug()) System.out.println("Il y a un problÃ¨me");                return;            }            g.addEdge(i, (int) (i+ Math.sqrt(this.getDimensions().getArea())), casez.getEnergy());            if(Game4J.getInstance().isDebug()) System.out.println("addEdge(" + i + "," + (int) (i+ Math.sqrt(this.getDimensions().getArea())) + ")");        }        this.matrix_maxEnergy = g.getAdjMatrix();        for (int i = 0; i < this.matrix_maxEnergy.length; i++) {            for (int j = 0; j < this.matrix_maxEnergy[0].length; j++) {                int indexI = i;                int indexJ = j;                if(this.matrix_maxEnergy[i][j] == -1) {                    this.matrix_maxEnergy[i][j] = 40;                }                if(this.matrix_maxEnergy[i][j] == 9) {                    this.matrix_maxEnergy[i][j] =  20;                }                if(this.matrix_maxEnergy[i][j] == -11) {                    this.matrix_maxEnergy[i][j] = 50;                }                if(this.matrix_maxEnergy[i][j] == 0 && i != j) {                    this.matrix_maxEnergy[i][j] = -1;                }                if(Game4J.getInstance().getCurrentGame().getCarte().getCases().stream().filter(c -> c.getId() == indexI || c.getId() == indexJ).findFirst().orElse(null).getCaseType() == CaseType.OBSTACLE) {                    this.matrix_maxEnergy[i][j] = -1;                }            }        }        if(Game4J.getInstance().isDebug()) System.out.println("max energy matrix");        if(Game4J.getInstance().isDebug()) System.out.println(g);    }    public int[][] getMatrix_distance() {        return matrix_distance;    }    public int[][] getMatrix_energy() {        return matrix_energy;    }    /**     * Permet de regÃ©nÃ©rer les meilleurs chemins     */    public void regeneratePath(Game game) {        final Dijkstra dijkstra = new Dijkstra();        this.generate_matrix_energyBestPath();        this.bestPathInDistance = dijkstra.getPath(game.getCarte().getMatrix_distance(), 0, game.getCarte().getDimensions().getArea() - 1);        this.bestPathInEnergy = dijkstra.getPath(game.getCarte().getMatrix_energy(), 0, game.getCarte().getDimensions().getArea() - 1);        this.bestPathToMaxEnergy = dijkstra.getPath(game.getCarte().getMatrix_maxEnergy(), 0, game.getCarte().getDimensions().getArea() - 1);    }}